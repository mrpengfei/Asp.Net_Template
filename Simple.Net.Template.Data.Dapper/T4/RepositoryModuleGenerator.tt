<#@ template language="C#" debug="True" hostspecific="True" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System" #>
<#@ include file="$(SolutionDir)\T4Common\ModelAuto.ttinclude"#>
<#@ include file="$(SolutionDir)\T4Common\DbModel.SqlServer.ttinclude"#>
<# 
	var nameSpace = "Simple.Net.Template.Data.Repositories";
	var outputPath = Path.GetDirectoryName(Path.GetDirectoryName(Host.TemplateFile))+"\\Repositories";
#>
<# var manager = new Manager(Host,GenerationEnvironment,true)
	{
		OutputPath = outputPath
	};

#>

<# manager.StartBlock("RepositoryModule.cs"); #>
using Autofac;
using Simple.Net.Template.Data.IRepositories;
using Simple.Net.Template.Data.Repositories;
using System;


namespace <#= nameSpace #>
{
	public partial class RepositoryModule : Module
	{
		protected override void Load(ContainerBuilder builder)
        {
			    builder.RegisterType<DapperRepository>()
                .As<IRepository>()
                .InstancePerLifetimeScope();

<# 
    using (var dbManager = new SqlServerDbModelManager(GetConnString()))
    {
		var tables = dbManager.GetTables();
        foreach (var item in tables)
        {
            var className = GetClassName(item.Name,"Repository");
			var entityName = GetClassName(item.Name);
#>
            builder.RegisterType<<#= className #>>()
                .As<I<#= className #>>()
                .InstancePerLifetimeScope();

<# }
}#>
        }
	}
}
<# manager.EndBlock(); #>

<# manager.Process(true); #>
